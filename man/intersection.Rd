% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/intersection.R
\docType{methods}
\name{intersection}
\alias{intersection}
\alias{intersection,TidySet,character-method}
\title{Intersection of two sets}
\usage{
intersection(object, sets, ...)

\S4method{intersection}{TidySet,character}(object, sets, name = NULL,
  FUN = "min", keep = FALSE, keep_relations = keep,
  keep_elements = keep, keep_sets = keep)
}
\arguments{
\item{object}{A TidySet object}

\item{sets}{The character of sets to be intersect.}

\item{...}{Other arguments.}

\item{name}{The name of the new set.}

\item{FUN}{A function to be applied when performing the union.
The standard intersection is the "min" function, but you can provide any other
function that given a numeric vector returns a single number.}

\item{keep}{A logical value if you want to keep originals sets.}

\item{keep_relations}{A logical value if you wan to keep old relations}

\item{keep_elements}{A logical value if you wan to keep old elements}

\item{keep_sets}{A logical value if you wan to keep old sets}
}
\value{
A \code{TidySet} object.
}
\description{
Given a TidySets creates a new set with the elements on the both of them.
}
\section{Methods (by class)}{
\itemize{
\item \code{object = TidySet,sets = character}: Applies the standard intersection
}}

\examples{
relations <- data.frame(sets = c(rep("a", 5), "b"),
                        elements = c("a", "b", "c", "d", "f", "f"),
                        fuzzy = runif(6))
a <- tidySet(relations)
intersection(a, c("a", "b"), "C")
}
